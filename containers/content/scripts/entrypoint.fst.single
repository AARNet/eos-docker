#!/bin/sh

export PATH=$PATH:/sbin:/usr/sbin

if [ -z "$EOS_FST_DISK" ]; then
  echo "no disk specified, exiting"
  exit 1
fi

. /etc/sysconfig/eos

# recreate container /dev/mapper
rm -rf /dev/mapper && mkdir /dev/mapper

# make sure container has access to our logical volumes, if there are any
ls /hostdev/mapper/ | sort | while read DEVICE; do
  ln -s /hostdev/mapper/${DEVICE} /dev/mapper/${DEVICE}
done


# check if disk is currently active
DEVICE=$(blkid | grep ${EOS_FST_DISK} | awk -F ":" '{print $1}')
if ! [ -z "${DEVICE}" ]; then
  LABEL=$(blkid -o value -s LABEL ${DEVICE})
  FSTYPE=$(blkid -o value -s TYPE ${DEVICE})
  TYPE=$(lsblk -rno TYPE ${DEVICE})

  # if disk is mounted, unmount disk and disconnect associated device from crypto loopback
  if ! [ -z "${LABEL}" ]; then
    umount -f /disks/${LABEL}
    if [ "${FSTYPE}" = "xfs" ] && [ "${TYPE}" = "crypt" ]; then
      cryptsetup luksClose ${DEVICE}
      echo "Disconnected ${DEVICE} from crypto loopback"
    fi
  fi
fi

# now we have to go through everything to find our disk
for DISK in $(ls /dev/sd*); do
  disklabel=$(lsblk -rno HCTL ${DISK} | head -n1 | awk -F  ":" '{printf "c%02dt%02d",$1,$3;}')
  if [[ "${disklabel}" =~ "${EOS_FST_DISK}" ]]; then
    disktype=$(blkid -o value -s TYPE ${DISK})
    if [ "${disktype}" = "crypto_LUKS" ]; then
      mappername=luks${disklabel}
      echo "Unlocking ${DISK} as ${mappername}"
      echo ${LUKSPASSPHRASE} | cryptsetup luksOpen ${DISK} ${mappername}
      fst_disk=/dev/mapper/${mappername}
    else
      fst_disk=${DISK}
    fi

    disk_label=$(blkid -o value -s LABEL ${fst_disk})
    mkdir -p /disks/${disk_label}
    mount -o defaults,rw,noatime,nodiratime,swalloc,logbsize=256k,logbufs=8,inode64 -t xfs ${fst_disk} /disks/${disk_label} && \
    chown -f daemon:daemon /disks/${disk_label} && \
    echo "Successfully mounted ${fst_disk} as /disks/${disk_label} for FST usage"  || echo "Failed to mount ${fst_disk} for FST usage"

    FST_PORT_OFFSET=$(lsblk -rno HCTL ${DISK} | head -n1 | awk -F  ":" '{printf "%d",$1 + $3;}')
  fi
done

# set up required directories etc for FST
echo "Setting /tmp to mode 1777"
chmod 1777 /tmp
if [ $? -ne 0 ]; then
  echo "Cannot set permissions on /tmp, existing"
fi

echo "Creating log directory if it doesn't exist"
if ! [ -d "/var/log/eos/fst" ]; then
  mkdir -p /var/log/eos/fst
fi
chown daemon:daemon /var/log/eos/fst

# set port
EOS_FST_PORT=$(( 2000 + ${FST_PORT_OFFSET} ))
EOS_FST_HTTP_PORT=$(( 8000 + ${FST_PORT_OFFSET} ))
sed -i "s/^xrd.port .*$/xrd.port ${EOS_FST_PORT-1095}/" /etc/xrd.cf.fst

# set geotag
export EOS_GEOTAG=$(hostname -s | awk -F "-" '{print $1}')

# remove all ipv6
sed '/ip6/d' /etc/hosts > /etc/tmphosts && cat /etc/tmphosts > /etc/hosts && rm -f /etc/tmphosts && cat /etc/hosts
sed '/localhost6/d' /etc/hosts > /etc/tmphosts && cat /etc/tmphosts > /etc/hosts && rm -f /etc/tmphosts && cat /etc/hosts

echo "Starting EOS FST " $(rpm -q eos-server | sed s/eos-server-//g)
XRDPROG=/usr/bin/xrootd
test -e /opt/eos/xrootd/bin/xrootd && XRDPROG=/opt/eos/xrootd/bin/xrootd

exec $XRDPROG -n fst -c /etc/xrd.cf.fst -l /var/log/eos/xrdlog.fst -Rdaemon

