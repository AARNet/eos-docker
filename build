#!/bin/bash
PROGNAME=`basename "$0"`

function usage {
    echo "./${PROGNAME} [-x <xrootd-version>] [-e <eos-version>] [-i <list,of,images>] [-t <tag>] [-p] [-f] [-h]"
    echo "  -x specify xrootd version, defaults to latest known stable"
    echo "  -e specify eos version, defaults to latest"
    echo "  -i specify target images to build"
    echo "  -t specify tag for built images"
    echo "  -p push images to repo after building"
    echo "  -f force a fresh build instead of using cache"
    echo "  -h prints this thing i guess"
    exit 0
}

set_base () {
  if [ -z "$1" ] || ! [ -f "containers/Dockertmp.$1" ] ; then
    echo "Tried to set base image for invalid Dockerfile"
    return 1
  fi
  sed "s|BASE_IMAGE|${base_image}|g" containers/Dockertmp.$1 > containers/Dockerfile.$1
}

# check which options are set
while getopts "x:e:q:i:t:gcpfh" opt; do
  case "$opt" in
    x) xrd_version=${OPTARG} ;;
    e) eos_version=${OPTARG} ;;
    i) targets=${OPTARG} ;;
    t) tag=${OPTARG} ;;
    p) push=true ;;
    f) force="--no-cache" ;;
    h) usage ;;
    \?) usage ;;
  esac
done

# set our build variables
export base_image='centos:7'
export registry=''
export xrd_version=${xrd_version:-4.8.3}

if ! [ -v tag ]; then
  export tag=${eos_version:-test}
fi

# check which containers to build
export all="mq mgm fst sync eossync eosd eosxd"
if ! [ -v targets ]; then
  export targets=${all}
else
  export targets=$(echo ${targets} | sed 's/,/ /g')
fi

export standalone=""
export dependencies=""

for image in ${targets}; do
  case "${image}" in 
    mq|mgm|fst|sync|eossync|gh)
      if [ -z "$dependencies" ]; then
        dependencies="${image}"
      else
        dependencies="${dependencies} ${image}"
      fi
      ;;
    eosd|eosxd)
      if [ -z "$standalone" ]; then
        standalone="${image}"
      else
        standalone="${standalone} ${image}"
      fi
      ;;
    *)
      echo "invalid image option ${image} - must be one of ${all}"
  esac
done

# build standalone containers, if any
if ! [ -z "$standalone" ]; then
  for target in ${standalone}; do
    set_base ${target}
    case "${target}" in
      eosd|eosxd)
        sudo docker build ${force} --build-arg XRD_VERSION=${xrd_version} --file containers/Dockerfile.${target} -t ${registry}eos-citrine-${target}:${tag} .
        if [ -v push ]; then
          sudo docker push ${registry}eos-citrine-${target}:${tag}
        fi
        ;;
    esac
  done
fi

# build containers that require eos/base, if any
if ! [ -z "$dependencies" ]; then
  # build eos-base
  set_base base
  sudo docker build ${force} --build-arg EOS_VERSION=${eos_version} --build-arg XRD_VERSION=${xrd_version} --file containers/Dockerfile.base -t eos/base:${tag} .
  if [ $? -ne 0 ]; then
    exit
  fi

  for target in ${dependencies}; do
    set_base ${dependencies}
    sed "s|VERSION_PLACEHOLDER|${tag}|g" containers/Dockertmp.${target} > containers/Dockerfile.${target}
    sudo docker build ${force} --file containers/Dockerfile.${target} -t ${registry}eos-citrine-${target}:${tag} .
  done
fi

## delete all generated dockerfiles
rm containers/Dockerfile.*
